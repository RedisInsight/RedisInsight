name: 'Code Coverage'
on:
  workflow_call:
    inputs:
      type:
        description: Type of report (unit or integration)
        type: string
        default: unit
      resource_name:
        description: Resource name of report folder
        type: string

jobs:
  coverage-unit:
    runs-on: ubuntu-latest
    name: Jest tests coverage
    if: ${{ inputs.type == 'unit' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.resource_name }}
          path: report

      - uses: jwalton/gh-find-current-pr@v1
        id: findPr

      - uses: ArtiomTr/jest-coverage-report-action@v2
        with:
          prnumber: ${{ steps.findPr.outputs.number }}
          coverage-file: report/coverage/report.json
          base-coverage-file: report/coverage/report.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          skip-step: all
          custom-title: Code Coverage - ${{ inputs.resource_name == 'report-be' && 'Backend' || 'Frontend' }} unit tests

  coverage-integration:
    runs-on: ubuntu-latest
    name: Jest tests coverage
    if: ${{ inputs.type == 'integration' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.resource_name }}

      - name: Parse Coverage Summary
        id: parse-coverage
        run: |
          # Extract coverage data from the summary
          STATEMENTS_PERCENT=$(grep "Statements" integration-coverage.txt | awk '{print $3}' | tr -d '\n' | tr -d '%')
          STATEMENTS_COVERED=$(grep "Statements" integration-coverage.txt | awk '{print $4}' | tr -d '\n' | sed 's/[()]//g')
          BRANCHES_PERCENT=$(grep "Branches" integration-coverage.txt | awk '{print $3}' | tr -d '\n' | tr -d '%')
          BRANCHES_COVERED=$(grep "Branches" integration-coverage.txt | awk '{print $4}' | tr -d '\n' | sed 's/[()]//g')
          FUNCTIONS_PERCENT=$(grep "Functions" integration-coverage.txt | awk '{print $3}' | tr -d '\n' | tr -d '%')
          FUNCTIONS_COVERED=$(grep "Functions" integration-coverage.txt | awk '{print $4}' | tr -d '\n' | sed 's/[()]//g')
          LINES_PERCENT=$(grep "Lines" integration-coverage.txt | awk '{print $3}' | tr -d '\n' | tr -d '%')
          LINES_COVERED=$(grep "Lines" integration-coverage.txt | awk '{print $4}' | tr -d '\n' | sed 's/[()]//g')

          # Ensure percentages are treated as numbers
          STATEMENTS_PERCENT=$(printf "%.0f" $STATEMENTS_PERCENT)
          BRANCHES_PERCENT=$(printf "%.0f" $BRANCHES_PERCENT)
          FUNCTIONS_PERCENT=$(printf "%.0f" $FUNCTIONS_PERCENT)
          LINES_PERCENT=$(printf "%.0f" $LINES_PERCENT)

          # Determine status based on percentage
          get_status() {
            if [ "$1" -lt 50 ]; then
              echo "ðŸ”´"
            elif [ "$1" -lt 80 ]; then
              echo "ðŸŸ¡"
            else
              echo "ðŸŸ¢"
            fi
          }

          STATEMENTS_STATUS=$(get_status $STATEMENTS_PERCENT)
          BRANCHES_STATUS=$(get_status $BRANCHES_PERCENT)
          FUNCTIONS_STATUS=$(get_status $FUNCTIONS_PERCENT)
          LINES_STATUS=$(get_status $LINES_PERCENT)

          # Format as a Markdown table
          echo "| Status      | Category    | Percentage  | Covered/Total |" > coverage-table.md
          echo "|-------------|-------------|-------------|---------------|" >> coverage-table.md
          echo "| $STATEMENTS_STATUS | Statements  | ${STATEMENTS_PERCENT}% | $STATEMENTS_COVERED |" >> coverage-table.md
          echo "| $BRANCHES_STATUS | Branches    | ${BRANCHES_PERCENT}% | $BRANCHES_COVERED |" >> coverage-table.md
          echo "| $FUNCTIONS_STATUS | Functions   | ${FUNCTIONS_PERCENT}% | $FUNCTIONS_COVERED |" >> coverage-table.md
          echo "| $LINES_STATUS | Lines       | ${LINES_PERCENT}% | $LINES_COVERED |" >> coverage-table.md

      - uses: jwalton/gh-find-current-pr@v1
        id: findPr

      - name: Post Coverage Summary as Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const table = fs.readFileSync('coverage-table.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: process.env.RR_Number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Code Coverage - Integration Tests\n\n${table}`
            });
        env:
          RR_Number: ${{ steps.findPr.outputs.number }}

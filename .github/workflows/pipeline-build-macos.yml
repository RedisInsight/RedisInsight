name: Build macos pipeline
on:
  workflow_call:
    inputs:
      environment:
        description: Environment for build
        required: false
        default: 'staging'
        type: string

      target:
        description: Build target
        required: false
        default: 'all'
        type: string

      debug:
        description: SSH Debug
        default: false
        type: boolean

jobs:
  build:
    name: Build macos
    runs-on: macos-14
    environment: ${{ inputs.environment }}
    steps:
    - uses: actions/checkout@v4

    # SSH Debug
    - name: Enable SSH
      uses: mxschmitt/action-tmate@v3
      if: inputs.debug
      with:
        detached: true

    - name: Add certificates to the keychain
      uses: ./.github/actions/install-apple-certs
      with:
        CSC_P12_BASE64: ${{ secrets.CSC_P12_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        CSC_MAS_PASSWORD: ${{ secrets.CSC_MAS_PASSWORD }}
        CSC_MAS_P12_BASE64: ${{ secrets.CSC_MAS_P12_BASE64 }}
        CSC_MAC_INSTALLER_PASSWORD: ${{ secrets.CSC_MAC_INSTALLER_PASSWORD }}
        CSC_MAC_INSTALLER_P12_BASE64: ${{ secrets.CSC_MAC_INSTALLER_P12_BASE64 }}

    - name: Install all libs and dependencies
      uses: ./.github/actions/install-all-build-libs
      with:
        keytar-host-mirror: ${{ secrets.NPM_CONFIG_KEYTAR_BINARY_HOST_MIRROR }}
        sqlite3-host-mirror: ${{ secrets.NPM_CONFIG_NODE_SQLITE3_BINARY_HOST_MIRROR }}

    - name: Install plugins dependencies and build plugins
      run: yarn build:statics

    - name: Build macos dmg (prod)
      if: vars.ENV == 'production' && inputs.target == vars.ALL
      run: |
        unset CSC_LINK

        yarn package:prod
        yarn package:mas
        rm -rf release/mac
        mv release/mas-universal/Redis-Insight-mac-universal-mas.pkg release/Redis-Insight-mac-universal-mas.pkg

    - name: Build macos dmg (staging)
      if: (vars.ENV == 'staging' || vars.ENV == 'development') && inputs.target == vars.ALL
      run: |
        unset CSC_LINK

        echo $APP_BUNDLE_VERSION
        echo $CSC_KEYCHAIN

        yarn package:stage && yarn package:mas
        rm -rf release/mac

        mv release/mas-universal/Redis-Insight-mac-universal-mas.pkg release/Redis-Insight-mac-universal-mas.pkg

    # handle manual builds
    - name: Build macos dmg (custom)
      if: inputs.target != vars.ALL
      run: |
        unset CSC_LINK
        target=$(echo "${{inputs.target}}" | grep -oE 'build_macos_[^ ]+' | sed 's/build_macos_/dmg:/' | paste -sd ' ' -)

        if [ "${{ vars.ENV == 'production' }}" == "true" ]; then
          yarn package:prod --mac $target
        else
          yarn package:stage --mac $target
        fi

        rm -rf release/mac

    - name: Repack dmg to tar
      if: vars.ENV == 'production' && inputs.target == vars.ALL
      run: |
        ARCH=x64 ./.github/redisstack/dmg.repack.sh
        ARCH=arm64 ./.github/redisstack/dmg.repack.sh

    - name: Upload macos packages
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          ./release/Redis-Insight*x64.dmg
          ./release/Redis-Insight*x64.dmg.blockmap
          ./release/Redis-Insight*.zip
          ./release/Redis-Insight*arm64.dmg
          ./release/Redis-Insight*arm64.dmg.blockmap
          ./release/Redis-Insight*.pkg
          ./release/*-mac.yml
          ./release/redisstack

    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      USE_HARD_LINKS: ${{ vars.USE_HARD_LINKS }}
      CSC_KEYCHAIN: ${{ vars.CSC_KEYCHAIN }}
      CSC_IDENTITY_AUTO_DISCOVERY: ${{ vars.CSC_IDENTITY_AUTO_DISCOVERY }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      RI_AI_CONVAI_TOKEN: ${{ secrets.RI_AI_CONVAI_TOKEN }}
      RI_AI_QUERY_PASS: ${{ secrets.RI_AI_QUERY_PASS }}
      RI_AI_QUERY_USER: ${{ secrets.RI_AI_QUERY_USER }}
      RI_CLOUD_API_TOKEN: ${{ secrets.RI_CLOUD_API_TOKEN }}
      RI_CLOUD_API_URL: ${{ secrets.RI_CLOUD_API_URL }}
      RI_CLOUD_CAPI_URL: ${{ secrets.RI_CLOUD_CAPI_URL }}
      RI_CLOUD_IDP_AUTHORIZE_URL: ${{ secrets.RI_CLOUD_IDP_AUTHORIZE_URL }}
      RI_CLOUD_IDP_CLIENT_ID: ${{ secrets.RI_CLOUD_IDP_CLIENT_ID }}
      RI_CLOUD_IDP_REVOKE_TOKEN_URL: ${{ secrets.RI_CLOUD_IDP_REVOKE_TOKEN_URL }}
      RI_CLOUD_IDP_GH_ID: ${{ secrets.RI_CLOUD_IDP_GH_ID }}
      RI_CLOUD_IDP_GOOGLE_ID: ${{ secrets.RI_CLOUD_IDP_GOOGLE_ID }}
      RI_CLOUD_IDP_ISSUER: ${{ secrets.RI_CLOUD_IDP_ISSUER }}
      RI_CLOUD_IDP_REDIRECT_URI: ${{ secrets.RI_CLOUD_IDP_REDIRECT_URI }}
      RI_CLOUD_IDP_TOKEN_URL: ${{ secrets.RI_CLOUD_IDP_TOKEN_URL }}
      RI_SEGMENT_WRITE_KEY: ${{ secrets.RI_SEGMENT_WRITE_KEY }}
      RI_SERVER_TLS_CERT: ${{ secrets.RI_SERVER_TLS_CERT }}
      RI_SERVER_TLS_KEY: ${{ secrets.RI_SERVER_TLS_KEY }}
      RI_FEATURES_CONFIG_URL: ${{ secrets.RI_FEATURES_CONFIG_URL }}
      RI_UPGRADES_LINK: ${{ secrets.RI_UPGRADES_LINK }}

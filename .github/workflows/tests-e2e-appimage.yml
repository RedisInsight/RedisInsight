name: Tests E2E AppImage
on:
  workflow_call:
    inputs:
      report:
        description: Send report to Slack
        required: false
        default: false
        type: boolean

      debug:
        description: Send report to Slack
        required: false
        default: false
        type: boolean

env:
  E2E_CLOUD_DATABASE_USERNAME: ${{ secrets.E2E_CLOUD_DATABASE_USERNAME }}
  E2E_CLOUD_DATABASE_PASSWORD: ${{ secrets.E2E_CLOUD_DATABASE_PASSWORD }}
  E2E_CLOUD_API_ACCESS_KEY: ${{ secrets.E2E_CLOUD_API_ACCESS_KEY }}
  E2E_CLOUD_DATABASE_HOST: ${{ secrets.E2E_CLOUD_DATABASE_HOST }}
  E2E_CLOUD_DATABASE_PORT: ${{ secrets.E2E_CLOUD_DATABASE_PORT }}
  E2E_CLOUD_DATABASE_NAME: ${{ secrets.E2E_CLOUD_DATABASE_NAME }}
  E2E_CLOUD_API_SECRET_KEY: ${{ secrets.E2E_CLOUD_API_SECRET_KEY }}
  E2E_RI_ENCRYPTION_KEY: ${{ secrets.E2E_RI_ENCRYPTION_KEY }}
  RI_ENCRYPTION_KEY: ${{ secrets.RI_ENCRYPTION_KEY }}
  RI_SERVER_TLS_CERT: ${{ secrets.RI_SERVER_TLS_CERT }}
  RI_SERVER_TLS_KEY: ${{ secrets.RI_SERVER_TLS_KEY }}
  SLACK_TEST_REPORT_KEY: ${{ secrets.SLACK_TEST_REPORT_KEY }}
  TEST_BIG_DB_DUMP: ${{ secrets.TEST_BIG_DB_DUMP }}
  DBUS_SESSION_BUS_ADDRESS: ${{ vars.DBUS_SESSION_BUS_ADDRESS }}
  DISPLAY: ${{ vars.DISPLAY }}
  APPIMAGE_PATH: ${{ vars.APPIMAGE_PATH }}
  REPORT_NAME: "report-appimage"

jobs:
  e2e-tests-appimage:
    runs-on: ubuntu-22.04
    name: E2E AppImage tests
    environment:
      name: production
    steps:
    - uses: actions/checkout@v4

    # SSH Debug
    - name: Enable SSH
      uses: mxschmitt/action-tmate@v3
      if: inputs.debug
      with:
        detached: true

    - name: Install necessary packages
      run: |
        sudo apt-get update -y
        sudo apt-get install kmod libfuse2 xvfb net-tools xdotool desktop-file-utils fluxbox netcat -y

    - name: Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable libnss3 libgconf-2-4 libxss1 libasound2
        xdg-settings set default-web-browser google-chrome.desktop

    - name: Download AppImage Artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-builds
        path: ./release

    - name: Start Xvfb
      run: |
        if [ -f /tmp/.X99-lock ]; then rm /tmp/.X99-lock; fi
        Xvfb :99 -ac -screen 0 1920x1080x24 &
        sleep 3
        fluxbox &

    - name: Run tests
      timeout-minutes: 60
      run: |
        .github/e2e/test.app-image.sh

    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ env.REPORT_NAME }}
        path: tests/e2e/report

    - name: Send report to Slack
      if: inputs.report && always()
      run: |
        APP_BUILD_TYPE="Electron (Linux)" node ./.github/e2e-results.js
        curl -H "Content-type: application/json" --data @e2e.report.json -H "Authorization: Bearer $SLACK_TEST_REPORT_KEY" -X POST https://slack.com/api/chat.postMessage

    - name: Generate test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: 'Test results: E2E (AppImage)'
        path: tests/e2e/results/results.xml
        reporter: java-junit
        list-tests: 'failed'
        list-suites: 'failed'
        fail-on-error: 'false'

    - name: Get current date
      id: date
      if: always()
      uses: ./.github/actions/get-current-date

    # Deploy report to AWS test bucket
    - name: Deploy report
      uses: ./.github/actions/deploy-test-reports
      if: always()
      with:
        group: 'report'
        path: "${{ vars.DEFAULT_TEST_REPORTS_URL }}/${{ steps.date.outputs.date }}/${{ github.run_id }}/${{ env.REPORT_NAME }}"
        AWS_BUCKET_NAME_TEST: ${{ vars.AWS_BUCKET_NAME_TEST }}
        AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DISTRIBUTION_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

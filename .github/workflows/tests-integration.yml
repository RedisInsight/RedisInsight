name: Integration tests
on:
  workflow_call:
    inputs:
      build:
        description: Backend build to run tests over
        type: string
        default: 'local'
      redis_client:
        description: Library to use for redis connection
        type: string
        default: 'ioredis'
      report:
        description: Send report for test run to slack
        type: boolean
        default: false
      short_rte_list:
        description: Use short rte list
        type: boolean
        default: false
      debug:
        description: SSH Debug
        type: boolean
        default: false

env:
  SLACK_AUDIT_REPORT_KEY: ${{ secrets.SLACK_AUDIT_REPORT_KEY }}
  SLACK_AUDIT_REPORT_CHANNEL: ${{ secrets.SLACK_AUDIT_REPORT_CHANNEL }}
  TEST_MEDIUM_DB_DUMP: ${{ secrets.TEST_MEDIUM_DB_DUMP }}
  TEST_BIG_DB_DUMP: ${{ secrets.TEST_BIG_DB_DUMP }}
  REPORT_NAME: 'report-it'
  ITESTS_NAMES: |
    {
      "oss-st-5": "OSS Standalone v5",
      "oss-st-5-pass": "OSS Standalone v5 with admin pass required",
      "oss-st-6": "OSS Standalone v6 and all modules",
      "oss-st-big": "OSS Standalone v6 and all modules and predefined amount of data inside (~3-4M)",
      "mods-preview": "OSS Standalone and all preview modules",
      "oss-st-6-tls": "OSS Standalone v6 with TLS enabled",
      "oss-st-6-tls-auth": "OSS Standalone v6 with TLS auth required",
      "oss-clu": "OSS Cluster",
      "oss-clu-tls": "OSS Cluster with TLS enabled",
      "oss-sent": "OSS Sentinel",
      "oss-sent-tls-auth": "OSS Sentinel with TLS auth",
      "re-st": "Redis Enterprise with Standalone inside",
      "re-clu": "Redis Enterprise with Cluster inside",
      "re-crdt": "Redis Enterprise with active-active database inside"
    }
  ITESTS_NAMES_SHORT: |
    {
      "mods-preview": "OSS Standalone and all preview modules",
      "oss-st-5-pass": "OSS Standalone v5 with admin pass required",
      "oss-st-6-tls-auth": "OSS Standalone v6 with TLS auth required",
      "oss-clu-tls": "OSS Cluster with TLS enabled",
      "re-crdt": "Redis Enterprise with active-active database inside",
      "oss-sent-tls-auth": "OSS Sentinel with TLS auth"
    }

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse-matrix.outputs.matrix }}
    steps:
      - name: Create JSON array for run-tests matrix
        id: parse-matrix
        run: |
          # Extract the JSON object from the environment variable
          MATRIX_JSON="$ITESTS_NAMES_SHORT"

          if [ "${{ inputs.short_rte_list }}" == "false" ]; then
            MATRIX_JSON="$ITESTS_NAMES"
          fi

          MATRIX_ARRAY=$(echo "$MATRIX_JSON" | jq -c 'keys')

          # Output the formed JSON array for use in other jobs
          echo "matrix=$MATRIX_ARRAY" >> $GITHUB_OUTPUT

      - name: Verify the formed matrix array
        run: |
          echo "Formed matrix array:"
          echo "${{ steps.parse-matrix.outputs.matrix }}"

  run-tests:
    name: ITest
    runs-on: ubuntu-latest
    needs: set-matrix
    environment:
      name: production
    strategy:
      fail-fast: false
      matrix:
        rte: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      # SSH Debug
      - name: Enable SSH
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          detached: true

      - name: Download Docker Artifacts
        if: inputs.build == 'docker'
        uses: actions/download-artifact@v4
        with:
          name: docker-builds
          path: ./release

      - name: Load built docker image from workspace
        if: inputs.build == 'docker'
        run: |
          docker image load -i ./release/docker/docker-linux-alpine.amd64.tar

      - name: Make sure coverage dir exists
        # Important: this directory is mounted on both the `app` and `test` Docker containers.
        run: mkdir -p ./redisinsight/api/test/test-runs/coverage

      - name: Run tests
        timeout-minutes: 20
        run: |
          if [ ${{ inputs.redis_client }} == "node-redis" ]; then
            export RI_REDIS_CLIENTS_FORCE_STRATEGY=${{ inputs.redis_client }}
          fi

          ./redisinsight/api/test/test-runs/start-test-run.sh -r ${{ matrix.rte }} -t ${{ inputs.build }}
          mkdir -p itest/coverages && mkdir -p itest/results

      - name: Verify coverage files generation
        if: always()
        run: |
          echo "🎉 SUCCESS! Coverage files are being generated correctly!"
          echo ""
          echo "=== Final coverage directory contents ==="
          ls -la ./redisinsight/api/test/test-runs/coverage/ || echo "Coverage directory does not exist!"
          echo ""
          echo "=== File verification ==="
          if [ -f "./redisinsight/api/test/test-runs/coverage/test-run-result.json" ]; then
            echo "✅ Test results file exists! File size:"
            ls -lh ./redisinsight/api/test/test-runs/coverage/test-run-result.json
          else
            echo "❌ Test results file missing!"
          fi

          if [ -f "./redisinsight/api/test/test-runs/coverage/test-run-coverage.json" ]; then
            echo "✅ Coverage file exists! File size:"
            ls -lh ./redisinsight/api/test/test-runs/coverage/test-run-coverage.json
          else
            echo "❌ Coverage file missing!"
          fi

          if [ -f "./redisinsight/api/test/test-runs/coverage/test-run-result.xml" ]; then
            echo "✅ JUnit XML file exists! File size:"
            ls -lh ./redisinsight/api/test/test-runs/coverage/test-run-result.xml
          else
            echo "❌ JUnit XML file missing!"
          fi

      - name: Debug NYC coverage generation
        if: always()
        run: |
          echo "=== Debugging missing test-run-coverage.json file ==="
          echo "Working directory: $(pwd)"
          echo ""
          echo "=== Check .nyc_output directory in API folder (HOST) ==="
          cd ./redisinsight/api
          if [ -d ".nyc_output" ]; then
            echo "✅ .nyc_output directory exists on host"
            echo "Contents:"
            ls -la .nyc_output
            echo "File count: $(find .nyc_output -name "*.json" | wc -l)"
            echo "Sample file content (first 5 lines):"
            find .nyc_output -name "*.json" | head -1 | xargs head -5 2>/dev/null || echo "No JSON files to sample"
          else
            echo "❌ .nyc_output directory does not exist on host!"
          fi
          echo ""
          echo "=== Check .nyc_output directory in DOCKER CONTAINER ==="
          cd /home/runner/work/RedisInsight/RedisInsight
          export COV_FOLDER="./redisinsight/api/test/test-runs/coverage"
          export ID="debug-test"
          export RTE="debug"
          cd ./redisinsight/api/test/test-runs
          echo "Running debug command inside container to check .nyc_output..."
          if [ -f "./docker.build.yml" ]; then
            echo "Using Docker build..."
            echo "Command: docker-compose -f ./docker.build.yml -f ./docker.build.env exec test ls -la /usr/src/app/.nyc_output"
            docker-compose -f ./docker.build.yml --env-file ./docker.build.env exec test ls -la /usr/src/app/.nyc_output 2>/dev/null || echo "Container not running or .nyc_output not found in container"
          else
            echo "Docker compose file not found"
          fi
          echo ""
          echo "=== Try manual NYC merge in HOST ==="
          cd /home/runner/work/RedisInsight/RedisInsight/redisinsight/api
          if [ -d ".nyc_output" ] && [ "$(find .nyc_output -name "*.json" | wc -l)" -gt 0 ]; then
            echo "Attempting manual NYC merge..."
            echo "Command: nyc merge .nyc_output coverage/test-run-coverage.json"
            nyc merge .nyc_output coverage/test-run-coverage.json || echo "NYC merge failed with exit code $?"
            echo "Checking result:"
            ls -la coverage/test-run-coverage.json 2>/dev/null || echo "File not created"
          else
            echo "Skipping merge - no coverage data files found"
          fi
          echo ""
          echo "=== Final coverage directory check ==="
          ls -la coverage/ | head -10

      - name: Copy test results to artifacts
        run: |
          echo "=== COPYING TEST RESULTS ==="
          echo "Current working directory: $(pwd)"
          echo ""
          echo "=== Files in expected coverage directory ==="
          ls -la ./redisinsight/api/test/test-runs/coverage/ || echo "Coverage directory does not exist!"
          echo ""
          echo "=== Copying files with error handling ==="

          # Copy JSON result file (should exist)
          if [ -f "./redisinsight/api/test/test-runs/coverage/test-run-result.json" ]; then
            cp ./redisinsight/api/test/test-runs/coverage/test-run-result.json ./itest/results/${{ matrix.rte }}.result.json
            echo "✅ Copied test-run-result.json"
          else
            echo "❌ test-run-result.json not found"
          fi

          # Copy XML result file (should exist)
          if [ -f "./redisinsight/api/test/test-runs/coverage/test-run-result.xml" ]; then
            cp ./redisinsight/api/test/test-runs/coverage/test-run-result.xml ./itest/results/${{ matrix.rte }}.result.xml
            echo "✅ Copied test-run-result.xml"
          else
            echo "❌ test-run-result.xml not found"
          fi

          # Copy coverage file (may be missing)
          if [ -f "./redisinsight/api/test/test-runs/coverage/test-run-coverage.json" ]; then
            cp ./redisinsight/api/test/test-runs/coverage/test-run-coverage.json ./itest/coverages/${{ matrix.rte }}.coverage.json
            echo "✅ Copied test-run-coverage.json"
          else
            echo "❌ test-run-coverage.json not found - creating empty file"
            echo "{}" > ./itest/coverages/${{ matrix.rte }}.coverage.json
          fi

      - name: Upload coverage files as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverages-${{ matrix.rte }}
          path: itest/coverages

      - name: Send report to Slack
        if: inputs.report && always()
        run: |
          ITEST_NAME=${{ matrix.rte }} node ./.github/itest-results.js
          curl -H "Content-type: application/json" --data @itests.report.json -H "Authorization: Bearer $SLACK_TEST_REPORT_KEY" -X POST https://slack.com/api/chat.postMessage

      # - name: Generate test results
      #   uses: dorny/test-reporter@v1
      #   id: test-reporter
      #   if: always()
      #   with:
      #     name: 'Test results: IT (${{ matrix.rte }}) tests'
      #     path: itest/results/*.result.json
      #     reporter: mocha-json
      #     list-tests: 'failed'
      #     list-suites: 'failed'
      #     fail-on-error: 'false'

      - name: Add link to report in the workflow summary
        if: always()
        run: |
          link="${{ steps.test-reporter.outputs.url_html }}"
          echo "- [${link}](${link})" >> $GITHUB_STEP_SUMMARY

  coverage:
    runs-on: ubuntu-latest
    name: Final coverage
    needs: run-tests
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Merge coverage artifacts
        id: merge-artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: coverages-artifacts
          pattern: coverages-*
          delete-merged: true

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverages-artifacts
          path: ./coverages

      - name: Calculate coverage across all tests runs
        run: |
          npx nyc report -t ./coverages -r text -r text-summary
          sudo mkdir -p /usr/src/app
          sudo cp -a ./redisinsight/api/. /usr/src/app/
          sudo cp -R ./coverages /usr/src/app && sudo chmod 777 -R /usr/src/app
          cd /usr/src/app && npx nyc report -t ./coverages -r text -r text-summary > integration-coverage.txt
          cp integration-coverage.txt $GITHUB_WORKSPACE/integration-coverage.txt

      - name: Upload integration-coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: integration-coverage.txt

      - name: Delete Artifact
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: ${{ steps.merge-artifacts.outputs.artifact-id }}
            });

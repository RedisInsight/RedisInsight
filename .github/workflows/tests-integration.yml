name: Integration tests
on:
  workflow_call:
    inputs:
      build:
        description: Backend build to run tests over
        type: string
        default: 'local'
      redis_client:
        description: Library to use for redis connection
        type: string
        default: 'ioredis'
      report:
        description: Send report for test run to slack
        type: boolean
        default: false
      short_rte_list:
        description: Use short rte list
        type: boolean
        default: false
      debug:
        description: SSH Debug
        type: boolean
        default: false

env:
  SLACK_AUDIT_REPORT_KEY: ${{ secrets.SLACK_AUDIT_REPORT_KEY }}
  SLACK_AUDIT_REPORT_CHANNEL: ${{ secrets.SLACK_AUDIT_REPORT_CHANNEL }}
  TEST_MEDIUM_DB_DUMP: ${{ secrets.TEST_MEDIUM_DB_DUMP }}
  TEST_BIG_DB_DUMP: ${{ secrets.TEST_BIG_DB_DUMP }}
  REPORT_NAME: 'report-it'
  ITESTS_NAMES: |
    {
      "oss-st-5": "OSS Standalone v5",
      "oss-st-5-pass": "OSS Standalone v5 with admin pass required",
      "oss-st-6": "OSS Standalone v6 and all modules",
      "oss-st-big": "OSS Standalone v6 and all modules and predefined amount of data inside (~3-4M)",
      "mods-preview": "OSS Standalone and all preview modules",
      "oss-st-6-tls": "OSS Standalone v6 with TLS enabled",
      "oss-st-6-tls-auth": "OSS Standalone v6 with TLS auth required",
      "oss-clu": "OSS Cluster",
      "oss-clu-tls": "OSS Cluster with TLS enabled",
      "oss-sent": "OSS Sentinel",
      "oss-sent-tls-auth": "OSS Sentinel with TLS auth",
      "re-st": "Redis Enterprise with Standalone inside",
      "re-clu": "Redis Enterprise with Cluster inside",
      "re-crdt": "Redis Enterprise with active-active database inside"
    }
  ITESTS_NAMES_SHORT: |
    {
      "mods-preview": "OSS Standalone and all preview modules",
      "oss-st-5-pass": "OSS Standalone v5 with admin pass required",
      "oss-st-6-tls-auth": "OSS Standalone v6 with TLS auth required",
      "oss-clu-tls": "OSS Cluster with TLS enabled",
      "re-crdt": "Redis Enterprise with active-active database inside",
      "oss-sent-tls-auth": "OSS Sentinel with TLS auth"
    }

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse-matrix.outputs.matrix }}
    steps:
      - name: Create JSON array for run-tests matrix
        id: parse-matrix
        run: |
          # Extract the JSON object from the environment variable
          MATRIX_JSON="$ITESTS_NAMES_SHORT"

          if [ "${{ inputs.short_rte_list }}" == "false" ]; then
            MATRIX_JSON="$ITESTS_NAMES"
          fi

          MATRIX_ARRAY=$(echo "$MATRIX_JSON" | jq -c 'keys')

          # Output the formed JSON array for use in other jobs
          echo "matrix=$MATRIX_ARRAY" >> $GITHUB_OUTPUT

      - name: Verify the formed matrix array
        run: |
          echo "Formed matrix array:"
          echo "${{ steps.parse-matrix.outputs.matrix }}"

  run-tests:
    name: ITest
    runs-on: ubuntu-latest
    needs: set-matrix
    environment:
      name: production
    strategy:
      fail-fast: false
      matrix:
        rte: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      # SSH Debug
      - name: Enable SSH
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          detached: true

      - name: Download Docker Artifacts
        if: inputs.build == 'docker'
        uses: actions/download-artifact@v4
        with:
          name: docker-builds
          path: ./release

      - name: Load built docker image from workspace
        if: inputs.build == 'docker'
        run: |
          docker image load -i ./release/docker/docker-linux-alpine.amd64.tar

      - name: Make sure coverage dir exists
        # Important: this directory is mounted on both the `app` and `test` Docker containers.
        run: mkdir -p ./redisinsight/api/test/test-runs/coverage

      - name: Run tests
        timeout-minutes: 20
        run: |
          if [ ${{ inputs.redis_client }} == "node-redis" ]; then
            export RI_REDIS_CLIENTS_FORCE_STRATEGY=${{ inputs.redis_client }}
          fi

          ./redisinsight/api/test/test-runs/start-test-run.sh -r ${{ matrix.rte }} -t ${{ inputs.build }}
          mkdir -p itest/coverages && mkdir -p itest/results

      - name: Debug - Check NYC merge results
        if: always()
        run: |
          echo "=== Test Command Verification ==="
          echo "Command that was executed:"
          cd ./redisinsight/api && cat package.json | jq -r '.scripts."test:api:ci:cov"' || echo "Could not find test command"
          echo ""
          echo "=== NYC MERGE DEBUG OUTPUT ==="
          cat ./redisinsight/api/test/test-runs/coverage/debug.log || echo "No debug.log found"
          echo ""
          echo "=== Check .nyc_output directory ==="
          ls -la ./redisinsight/api/.nyc_output || echo ".nyc_output directory does not exist!"
          if [ -d "./redisinsight/api/.nyc_output" ]; then
            echo "Files in .nyc_output:"
            find ./redisinsight/api/.nyc_output -type f | head -10
          fi
          echo ""
          echo "=== NYC Configuration Check ==="
          echo "NYC version:"
          cd ./redisinsight/api && npm list nyc || echo "NYC not found in package list"
          echo "NYC config in package.json:"
          cd ./redisinsight/api && cat package.json | jq '.nyc' || echo "No NYC config in package.json"
          echo "Check for .nycrc files:"
          find ./redisinsight/api -name ".nycrc*" -exec ls -la {} \; || echo "No .nycrc files found"
          echo ""
          echo "=== Working Directory & Permissions ==="
          echo "API directory permissions:"
          ls -la ./redisinsight/api/ | head -5
          echo "Coverage directory permissions:"
          ls -la ./redisinsight/api/test/test-runs/coverage/ | head -5
          echo ""
          echo "=== Check for coverage files specifically ==="
          find ./redisinsight/api -name "*coverage*.json" -exec ls -la {} \; || echo "No coverage JSON files found"
          echo ""
          echo "=== Final coverage directory contents ==="
          ls -la ./redisinsight/api/test/test-runs/coverage/ || echo "Coverage directory does not exist!"
          echo ""
          echo "=== Test execution verification ==="
          if [ -f "./redisinsight/api/test/test-runs/coverage/test-run-result.json" ]; then
            echo "Test results file exists, checking for test completion:"
            grep -E '"tests":|"passes":|"failures":|"pending":' ./redisinsight/api/test/test-runs/coverage/test-run-result.json | head -10
          else
            echo "No test results JSON file found"
          fi

      - name: Debug - Show directory structure and environment files
        run: |
          echo "=== DEBUGGING COVERAGE ISSUE ==="
          echo "Current working directory: $(pwd)"
          echo ""
          echo "=== Environment files content ==="
          echo "local.build.env:"
          cat ./redisinsight/api/test/test-runs/local.build.env
          echo ""
          echo "docker.build.env:"
          cat ./redisinsight/api/test/test-runs/docker.build.env
          echo ""
          echo "=== Directory structure under redisinsight/api ==="
          find ./redisinsight/api -type d -name "*coverage*" -o -name "*test-runs*" | head -10
          echo ""
          echo "=== Files in expected coverage directory ==="
          ls -la ./redisinsight/api/test/test-runs/coverage/ || echo "Coverage directory does not exist!"
          echo ""
          echo "=== All files under test-runs ==="
          find ./redisinsight/api/test/test-runs -name "*.json" -o -name "*.xml" | head -20
          echo ""
          echo "=== Looking for test result files anywhere ==="
          find ./redisinsight/api -name "test-run-result.*" -o -name "*coverage*.json" | head -10

          cp ./redisinsight/api/test/test-runs/coverage/test-run-result.json ./itest/results/${{ matrix.rte }}.result.json
          cp ./redisinsight/api/test/test-runs/coverage/test-run-result.xml ./itest/results/${{ matrix.rte }}.result.xml
          cp ./redisinsight/api/test/test-runs/coverage/test-run-coverage.json ./itest/coverages/${{ matrix.rte }}.coverage.json

      - name: Upload coverage files as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverages-${{ matrix.rte }}
          path: itest/coverages

      - name: Send report to Slack
        if: inputs.report && always()
        run: |
          ITEST_NAME=${{ matrix.rte }} node ./.github/itest-results.js
          curl -H "Content-type: application/json" --data @itests.report.json -H "Authorization: Bearer $SLACK_TEST_REPORT_KEY" -X POST https://slack.com/api/chat.postMessage

      - name: Generate test results
        uses: dorny/test-reporter@v1
        id: test-reporter
        if: always()
        with:
          name: 'Test results: IT (${{ matrix.rte }}) tests'
          path: itest/results/*.result.xml
          reporter: jest-junit
          list-tests: 'failed'
          list-suites: 'failed'
          fail-on-error: 'false'

      - name: Add link to report in the workflow summary
        if: always()
        run: |
          link="${{ steps.test-reporter.outputs.url_html }}"
          echo "- [${link}](${link})" >> $GITHUB_STEP_SUMMARY

  coverage:
    runs-on: ubuntu-latest
    name: Final coverage
    needs: run-tests
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Merge coverage artifacts
        id: merge-artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: coverages-artifacts
          pattern: coverages-*
          delete-merged: true

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverages-artifacts
          path: ./coverages

      - name: Calculate coverage across all tests runs
        run: |
          npx nyc report -t ./coverages -r text -r text-summary
          sudo mkdir -p /usr/src/app
          sudo cp -a ./redisinsight/api/. /usr/src/app/
          sudo cp -R ./coverages /usr/src/app && sudo chmod 777 -R /usr/src/app
          cd /usr/src/app && npx nyc report -t ./coverages -r text -r text-summary > integration-coverage.txt
          cp integration-coverage.txt $GITHUB_WORKSPACE/integration-coverage.txt

      - name: Upload integration-coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: integration-coverage.txt

      - name: Delete Artifact
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: ${{ steps.merge-artifacts.outputs.artifact-id }}
            });

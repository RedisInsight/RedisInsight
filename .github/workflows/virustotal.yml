name: Virustotal Analyze

on:
  workflow_call:
    inputs:
      skip_report:
        description: Skip report
        required: false
        default: false
        type: boolean

env:
  VIRUSTOTAL_FILE_NAMES: ${{ vars.VIRUSTOTAL_FILE_NAMES }}
  VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
  SLACK_TEST_REPORT_KEY: ${{ secrets.SLACK_TEST_REPORT_KEY }}

jobs:
  download_artifacts:
    name: Download artifacts
    runs-on: ubuntu-latest
    outputs:
      artifact_names: ${{ steps.list_artifacts.outputs.artifact_names }}
      artifact_exists: ${{ steps.list_artifacts.outputs.artifact_exists }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release
        # TODO: enable pattern filter after fix:
        # https://github.com/nektos/act/issues/2433
        #   pattern: '*-build'
        #   merge-multiple: true

    - run: ls -R ./release

    - name: List Artifact Files
      id: list_artifacts
      run: |
        # If artifacts don't exist put array of app names for url check
        if [ ! -d "./release" ]; then
          echo "NO REALEASE FOLDER ${VIRUSTOTAL_FILE_NAMES}"
          echo "artifact_exists=false" >> $GITHUB_OUTPUT
          echo "artifact_names=$VIRUSTOTAL_FILE_NAMES" >> $GITHUB_OUTPUT
          exit 0;
        fi

        # Get list of artifacts
        ARTIFACTS=$(ls ./release)

        # Conver list to json
        ARTIFACTS_JSON=$(echo "$ARTIFACTS" | jq -R -s -c 'split("\n")[:-1]')

        echo "artifact_exists=true" >> $GITHUB_OUTPUT
        echo "artifact_names=$ARTIFACTS_JSON" >> $GITHUB_OUTPUT

  analyze:
    name: Analyze file
    runs-on: ubuntu-latest
    needs: download_artifacts

    strategy:
      fail-fast: false
      matrix:
        artifact: ${{ fromJson(needs.download_artifacts.outputs.artifact_names) }}

    steps:
    - name: Download Artifact ${{ matrix.artifact }}
      if: needs.download_artifacts.outputs.artifact_exists == 'true'
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ./release

    - name: Send File to scan
      if: needs.download_artifacts.outputs.artifact_exists == 'true'
      run: |
        uploadZipFile="./${{ matrix.artifact }}.zip"

        # Compress artifactes
        zip -r "${uploadZipFile}" "./release" ${{ startsWith(matrix.artifact, 'macos-') && '-x "*/redisstack/*" "*.tar.gz" "*.zip"' || '' }}

        # Generate url to download zip file
        uploadUrl=$(curl -sq -XGET https://www.virustotal.com/api/v3/files/upload_url -H "x-apikey: $VIRUSTOTAL_API_KEY" | jq -r '.data')

        echo "File to upload: ${uploadZipFile}"

        # Upload zip file to VirusTotal
        analysedId=$(curl -sq -XPOST "${uploadUrl}" -H "x-apikey: $VIRUSTOTAL_API_KEY" --form file=@"${uploadZipFile}" | jq -r '.data.id')

        if [ $analysedId == "null" ]; then
          echo 'Status is null, something went wrong';
          exit 1;
        fi

        echo "ANALYZED_ID=$analysedId" >> $GITHUB_ENV
        echo "BUILD_NAME=${{ matrix.artifact }}" >> $GITHUB_ENV

    - name: Send Url to scan
      if: needs.download_artifacts.outputs.artifact_exists == 'false'
      run: |
        url="https://download.redisinsight.redis.com/latest/${{ matrix.artifact }}"

        echo "Url to check: ${url}"

        # Upload Url to VirusTotal
        analysedId=$(curl -sq -XPOST https://www.virustotal.com/api/v3/urls -H "x-apikey: $VIRUSTOTAL_API_KEY" --form url=${url} | jq -r '.data.id')

        if [ $analysedId == "null" ]; then
          echo 'Status is null, something went wrong';
          exit 1;
        fi

        echo "ANALYZED_ID=$analysedId" >> $GITHUB_ENV

    - name: Check analyze status
      run: |
        echo "Virustotal Analyzed id: ${ANALYZED_ID}"
        countOperations="50"
        intervalTime=30

        until [ "$countOperations" == "0" ]; do
          if [ "$analyzeStatus" == "completed" ]
          then
            echo "Current status: ${analyzeStatus}"; break;
          else
            echo "Current status: ${analyzeStatus}, retries left: ${countOperations} ";
            analyzeStatus=$(curl -sq -XGET https://www.virustotal.com/api/v3/analyses/${ANALYZED_ID} -H "x-apikey: $VIRUSTOTAL_API_KEY" | jq -r '.data.attributes.status');

            sleep $intervalTime;
            countOperations=$[$countOperations - 1];
          fi
        done

        if [ "$analyzeStatus" != "completed" ]; then
          echo 'Analyse is not completed';
          exit 1;
        fi

    - name: Validate analyze
      id: validate
      run: |
        analyzeStats=$(curl -sq -XGET https://www.virustotal.com/api/v3/analyses/${ANALYZED_ID} -H "x-apikey: $VIRUSTOTAL_API_KEY" | jq -r '.data.attributes.stats')
        analazedHarmless=$(echo ${analyzeStats} | jq '.harmless')
        analazedMalicious=$(echo ${analyzeStats} | jq '.malicious')
        analazedSuspicious=$(echo ${analyzeStats} | jq '.suspicious')

        echo "Results:"
        echo "analazedMalicious:  ${analazedMalicious}, analazedSuspicious: ${analazedSuspicious}, analazedHarmless: ${analazedHarmless}"

        if [ "$analazedMalicious" != "0" ] || [ "$analazedSuspicious" != "0" ]; then
          echo "FAILED=true" >> $GITHUB_ENV
          echo 'Found dangers';
        fi

        echo "FAILED=false" >> $GITHUB_ENV
        echo "skip_report=true" >> $GITHUB_ENV
        echo 'Passed';

    - name: Send Report
      if: ${{ !steps.validate.outputs.skip_report && !inputs.skip_report }}
      run: |
        FILE_NAME=virustotal.report.json
        BUILD_NAME=$BUILD_NAME FILE_NAME=$FILE_NAME VIRUS_CHECK_FAILED=$FAILED node .github/virustotal-report.js

        BUILD_NAME=$BUILD_NAME FILE_NAME=$FILE_NAME VIRUS_CHECK_FAILED=$FAILED node .github/virustotal-report.js &&
        curl -H "Content-type: application/json" --data @$FILE_NAME -H "Authorization: Bearer ${SLACK_TEST_REPORT_KEY}" -X POST https://slack.com/api/chat.postMessage

        if [ "$FAILED" == "true" ]; then
          echo 'Found dangers';
          exit 1;
        fi

diff --git a/node_modules/redis-parser/lib/parser.js b/node_modules/redis-parser/lib/parser.js
index 5d2532a..9f1bfe0 100644
--- a/node_modules/redis-parser/lib/parser.js
+++ b/node_modules/redis-parser/lib/parser.js
@@ -12,6 +12,10 @@ var interval = null
 var counter = 0
 var notDecreased = 0

+const MAX_STRING_SIZE = parseInt(process.env.RI_CLIENTS_MAX_STRING_SIZE, 10) || Number.MAX_SAFE_INTEGER;
+const TRUNCATED_STRING_SIZE = parseInt(process.env.RI_CLIENTS_TRUNCATED_STRING_SIZE, 10) || 30;
+const TRUNCATED_PREFIX = Buffer.from(process.env.RI_CLIENTS_TRUNCATED_STRING_PREFIX || '[Truncated due to length]')
+
 /**
  * Used for integer numbers only
  * @param {JavascriptRedisParser} parser
@@ -92,12 +96,21 @@ function parseSimpleString (parser) {
   while (offset < length) {
     if (buffer[offset++] === 13) { // \r\n
       parser.offset = offset + 1
+
+      // truncate buffer if needed
+      const responseBuffer = truncateBufferIfNeeded(parser.buffer.slice(start, offset - 1))
+
       if (parser.optionReturnBuffers === true) {
-        return parser.buffer.slice(start, offset - 1)
+        return responseBuffer
       }
-      return parser.buffer.toString('utf8', start, offset - 1)
+      return responseBuffer.toString('utf8')
     }
   }
+
+  // handle big simple strings
+  if (parser.buffer.length - parser.offset > MAX_STRING_SIZE) {
+    parser.buffer = parser.buffer.slice(0, MAX_STRING_SIZE + parser.offset + 1)
+  }
 }

 /**
@@ -159,10 +172,30 @@ function parseBulkString (parser) {
   }
   const start = parser.offset
   parser.offset = offset + 2
+
+  // truncate buffer before response if needed
+  const responseBuffer = truncateBufferIfNeeded(parser.buffer.slice(start, offset))
+
   if (parser.optionReturnBuffers === true) {
-    return parser.buffer.slice(start, offset)
+    return responseBuffer
   }
-  return parser.buffer.toString('utf8', start, offset)
+  return responseBuffer.toString('utf8')
+}
+
+/**
+ * Truncates Buffer when exceeded MAX_STRING_SIZE to TRUNCATED_STRING_SIZE
+ * Adds prefix and suffix to the value
+ * It will be not possible to use such values in the future
+ * Truncated values should be just shown without any actions on them
+ * @param {Buffer} buffer
+ * @returns {Buffer}
+ */
+function truncateBufferIfNeeded(buffer) {
+  if (buffer.length >= MAX_STRING_SIZE) {
+    return Buffer.concat([TRUNCATED_PREFIX, Buffer.from(' '), buffer.subarray(0, TRUNCATED_STRING_SIZE), Buffer.from('...')])
+  }
+
+  return buffer;
 }

 /**
@@ -418,7 +451,7 @@ function concatBulkBuffer (parser) {
   }
   list[i].copy(bufferPool, bufferOffset, 0, offset - 2)
   bufferOffset += offset - 2
-  return bufferPool.slice(start, bufferOffset)
+  return truncateBufferIfNeeded(bufferPool.slice(start, bufferOffset))
 }

 class JavascriptRedisParser {
@@ -522,8 +555,14 @@ class JavascriptRedisParser {
       }
       this.returnReply(tmp)
     } else {
-      this.bufferCache.push(buffer)
-      this.totalChunkSize += buffer.length
+      // ignore entire chunk
+      const rem = this.totalChunkSize - this.offset;
+      if (rem < MAX_STRING_SIZE || (rem + buffer.length <= MAX_STRING_SIZE)) {
+        this.bufferCache.push(buffer)
+        this.totalChunkSize += buffer.length
+      } else {
+        this.bigStrSize -= buffer.length
+      }
       return
     }


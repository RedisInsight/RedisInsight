.container {
  @include eui.scrollBar;

  display: flex;
  flex: 1;
  width: 100%;
  padding: 16px;
  overflow-y: auto;
  overflow-x: auto;
  background-color: var(--euiColorEmptyShade);
  color: var(--euiTextSubduedColor);
  position: relative;

  input {
    font-family: "Graphik", sans-serif !important;
  }

  :global {
    .euiFieldText {
      font-size: 13px !important;
      max-width: initial !important;
      height: 26px !important;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;

      &.withoutBorder {
        &:not(:focus) {
          background-color: inherit;
          box-shadow: none !important;
        }
      }
    }

    .euiFormControlLayout {
      height: 24px !important;
    }
  }
}

.fullWidthContainer {
  width: 100%;
  padding: 10px 0;
}

.placeholder {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
  padding: 12px;
  width: 100%;
}

.jsonData {
  font-size: 14px;
  line-height: 25px;
  font-family: "Inconsolata", monospace !important;
  letter-spacing: 0.15px;
  flex-grow: 1;
  width: 100%;
  display: flex;
  flex-direction: column;

  input {
    width: 100%;
    min-width: 140px;
  }
}

.defaultFont {
  font-family: "Graphik", sans-serif !important;
}

.errorMessage {
  background-color: var(--tableDarkestBorderColor);
  padding: 4px 8px 0 8px;
  width: 100%;
}

.controls,
.controlsBottom {
  background-color: var(--euiColorLightestShade);
  height: 24px !important;
  margin-bottom: 4px !important;
  z-index: 2;
  display: flex;
  align-items: center;
  box-shadow: 0 3px 3px var(--controlsBoxShadowColor);

  &.controls {
    width: 80px;
    border-radius: 0 10px 10px 0;

    :global(.euiButtonIcon) {
      width: 50% !important;
      height: 100% !important;
    }
  }

  &.controlsBottom {
    height: 34px;
    top: 100%;
    right: 0;
    left: auto;
    border-radius: 0 0 10px 10px;
  }
}

.row {
  min-height: 25px;
  position: relative;
  display: flex;
  align-items: flex-end;

  &:before {
    content: "";
    display: block;
    position: absolute;
    height: 100%;
    top: 0;
    left: 0;
    right: 0;
    margin: 0 -16px;
    z-index: 0;
  }

  &:nth-child(2n):before {
    background: var(--browserTableRowEven);
  }

  &:hover:before {
    background: var(--hoverInListColor);
  }

  > div, span, button {
    z-index: 1;
  }

  div {
    min-height: 25px;
  }
}

.topRow {
  justify-content: space-between;
}

.rowContainer {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
}

.keyName {
  color: var(--jsonKeyNameColor) !important;
  width: max-content;
  word-break: break-all;
  max-width: 300px;
  box-sizing: content-box;
  flex-shrink: 0;
}

.quotedKeyName {
  display: flex;
  flex-direction: row;
  align-items: center;
  padding-left: 1em;
}

.defaultFontExpandArray {
  display: inline-block;
  cursor: pointer;
  padding-left: 8px;
}

.defaultFontOpenIndex {
  display: inline-block;
  cursor: pointer;
  padding-left: 8px;
}

.jsonValue {
  font-size: 14px;
  line-height: 25px;
  font-family: "Inconsolata", monospace;
  letter-spacing: 0.15px;
  padding: 0 8px;
  max-width: 1000px;
  overflow: hidden;
  text-overflow: ellipsis;

  &:hover {
    outline: 1px solid #b5b6c0;
  }
}

.keyNameArray {
  color: var(--jsonKeyNameArrayColor) !important;
}

.jsonString {
  color: var(--jsonStringColor) !important;
}

.jsonNumber {
  color: var(--jsonNumberColor) !important;
}

.jsonBoolean {
  color: var(--jsonBooleanColor) !important;
}

.jsonNull {
  color: var(--jsonNullColor) !important;
}

.jsonNonStringPrimitive {
  color: var(--jsonNonStringPrimitiveColor) !important;
}

.newValue {
  color: var(--euiColorDanger) !important;
}

.stringStyle {
  word-break: break-all;
}

.quoted {
  &:before,
  &:after {
    content: '"';
  }
}

.actionButtons, .deleteBtn {
  margin-left: 1em;
  display: flex;
  align-items: center;
  min-width: 24px;
}

.declineBtn:hover {
  color: var(--euiColorColorDanger) !important;
}

.applyBtn:hover {
  color: var(--euiColorPrimary) !important;
}

.spinner {
  width: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.fullWidthTextArea {
  height: 150px;
  width: 100%;
  max-width: none;
}

.confirmDialogActions {
  display: flex;
  justify-content: flex-end;
  margin-top: 16px;

  button {
    margin-left: 8px;

    &:first-of-type {
      margin-left: 0;
    }
  }
}

.actions {
  margin-top: 1em;
  display: flex;
  flex-direction: row !important;
  width: 100%;
  justify-content: flex-end;

  button {

    &:first-of-type {
      margin-right: 1em;
    }
  }
}

.editor, .editorWrapper {
  // Using 100% height starts a weird Monaco animation,
  // which causes the editor to overflow its container.
  // Probably it's related to the borders of the inside elements.
  // TODO: Find a cleaner fix for this.
  height: calc(100% - 2px) !important;
}
